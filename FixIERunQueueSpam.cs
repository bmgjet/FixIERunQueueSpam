using System;
using System.Linq;
using System.Reflection;

namespace Oxide.Plugins
{
    [Info("FixIERunQueueSpam", "BIGMAK", "1.0.1")]
    [Description("Stops RunQueue Spam")]
    class FixIERunQueueSpam : RustPlugin
    {
        //Harmony Patch
        private const string HarmonyPatchData = "TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAGXH9rcAAAAAAAAAAOAAIiALATAAAAwAAAAGAAAAAAAAeioAAAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACYqAABPAAAAAEAAALgDAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAB0KQAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAgAoAAAAgAAAADAAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAALgDAAAAQAAAAAQAAAAOAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAAEgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABaKgAAAAAAAEgAAAACAAUAACEAAHQIAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAwChAAAAAQAAEQIoAQAAKwoWCziFAAAABgdvEQAACnsSAAAKfhMAAAooFAAACixpBgdvEQAACnsVAAAKdRoAAAFyAQAAcCgWAAAKLEwGB28RAAAKfhcAAAp9EgAACgYHF1hvEQAACn4XAAAKfRIAAAoGBxhYbxEAAAp+FwAACn0SAAAKBgcZWG8RAAAKfhcAAAp9EgAACisQBxdYCwcGbxgAAAo/b////wYqAAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAeAIAACN+AADkAgAAYAMAACNTdHJpbmdzAAAAAEQGAABcAAAAI1VTAKAGAAAQAAAAI0dVSUQAAACwBgAAxAEAACNCbG9iAAAAAAAAAAIAAAFHFQIICQgAAAD6ATMAFgAAAQAAABoAAAACAAAAAQAAAAEAAAAYAAAADwAAAAEAAAABAAAAAQAAAAQAAAABAAAAAAAaAgEAAAAAAAYATwHVAgYAvAHVAgYAgwCjAg8A/QIAAAYAqwBAAgYAMgFAAgYAEwFAAgYAowFAAgYAbwFAAgYAiAFAAgYAwgBAAgYAlwC2AgYAdQC2AgYA9gBAAgYA3QDaAQYAZAA5AgoAjQIAAA4A+wFJAwYAGQM5AgYAAQAoAA4AUgJJAwYADwAoABIAWQB2AgYASwAgAwYA9QIgAwYA9AE5AgAAAAAWAAAAAAABAAEAgQEQAAgCCAJNAAEAAQBQIAAAAACRAIICbwABAAAAAQAMAwkAlwIBABEAlwIGABkAlwIKACkAlwIQADEAlwIQADkAlwIQAEEAlwIQAEkAlwIQAFEAlwIQAFkAlwIQAGEAlwIVAGkAlwIQAHEAlwIQAHkAlwIQAJEAlwIaALkAQQMrAAwAMAJHAKkAUgBNAMkAnQJNAMEAUQNRAKkAQwBZANEAUQNcAMkAYgJNAAwANwNiAC4ACwB+AC4AEwCHAC4AGwCmAC4AIwCvAC4AKwDGAC4AMwDGAC4AOwDGAC4AQwCvAC4ASwDMAC4AUwDGAC4AWwDGAC4AYwDkAC4AawAOAS4AcwAbAUMAewBlASEAQAAEgAAAAQAAAAAAAAAAAAAAAAAIAgAABAAAAAAAAAAAAAAAZgAfAAAAAAAAAAAAAAAAAAAAAAAAAGYCAAAAAAEAAgAAAAEAAAAAAAAASAMAAAAABAAAAAAAAAAAAAAAZgBpAAAAAAAhADsAAAAASUVudW1lcmFibGVgMQBMaXN0YDEAPE1vZHVsZT4AbXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAb3BlcmFuZABPcENvZGUAb3Bjb2RlAEVudW1lcmFibGUAVHlwZQBTeXN0ZW0uQ29yZQBHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFN0cmluZwBIYXJtb255UGF0Y2gAQWRkUXVldWVOdWxsQ2hlY2sAQWRkUXVldWVOdWxsQ2hlY2suZGxsAGdldF9JdGVtAFN5c3RlbQBTeXN0ZW0uUmVmbGVjdGlvbgBDb2RlSW5zdHJ1Y3Rpb24ATm9wAEFzc2VtYmx5LUNTaGFycABTeXN0ZW0uTGlucQBUcmFuc3BpbGVyAFNlcnZlck1ncgAuY3RvcgBMZHN0cgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAT3BDb2RlcwBEZWJ1Z2dpbmdNb2RlcwBpbnN0cnVjdGlvbnMAT2JqZWN0AFN5c3RlbS5SZWZsZWN0aW9uLkVtaXQAZ2V0X0NvdW50AFRvTGlzdAAwSGFybW9ueQBvcF9FcXVhbGl0eQAAAAAAV1MAZQByAHYAZQByACAARQB4AGMAZQBwAHQAaQBvAG4AOgAgAEkAbgBkAHUAcwB0AHIAaQBhAGwARQBuAHQAaQB0AHkALgBSAHUAbgBRAHUAZQB1AGUAAAAAAAK7jN67ddpFqqxJPmH4mokABCABAQgDIAABBSABARERBCABAQ4EIAEBAgYgAgESQQ4JBwIVElkBElUIDxABARUSWQEeABUSUQEeAAQKARJVBhUSWQESVQUgARMACAMGEWEHAAICEWERYQIGHAUAAgIODgMgAAgIt3pcVhk04IkOAAEVElEBElUVElEBElUIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAFgEAEUFkZFF1ZXVlTnVsbENoZWNrAAAFAQAAAAAXAQASQ29weXJpZ2h0IMKp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
        private const string HarmonyPath = "./HarmonyMods/AddQueueNullCheck.dll";
        private const string PatchName = "AddQueueNullCheck";

        private void Init()
        {
            if (!File.Exists(HarmonyPath))
            {
                File.WriteBytes(HarmonyPath, Convert.FromBase64String(HarmonyPatchData));
                //Call load on new harmony dll
                ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), "harmony.load " + PatchName, Array.Empty<object>());
            }
        }

        void Unload()
        {
            if (File.Exists(HarmonyPath))
            {
                ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), "harmony.unload " + PatchName, Array.Empty<object>());
                File.Delete(HarmonyPath);
            }
        }

        private static class File
        {
            private static MethodInfo StealthGetMethod(string definingLib, string declaringType, string methodName, Type[] args)
            {
                var assemblies = AppDomain.CurrentDomain.GetAssemblies();
                var target = assemblies.FirstOrDefault(x => x.FullName.Contains(definingLib))
                    ?? throw new Exception("Target library was not found: " + definingLib);
                var found = target.GetType(declaringType)
                    ?? throw new Exception($"Declaring Type was not found: {definingLib} - {declaringType}.{methodName}");

                var methodInfo = found.GetMethod(methodName, args);
                if (methodInfo == null)
                {
                    string all = string.Join(Environment.NewLine, found.GetMethods().Select(x => x.Name));
                    throw new Exception($"Method info was not found: {definingLib} - {declaringType}.{methodName}{Environment.NewLine}" +
                        $"All methods:{Environment.NewLine}{all}");
                }
                return methodInfo;
            }

            internal static bool Exists(string path)
            {
                var methodInfo = StealthGetMethod("mscorlib", "System.IO.File", "Exists", new Type[] { typeof(string) });
                var result = methodInfo.Invoke(null, new object[] { path })
                    ?? throw new Exception($"Method returned null: {nameof(File)}.{nameof(Exists)}");
                return (bool)result;
            }

            internal static void WriteBytes(string path, byte[] data)
            {
                var methodInfo = StealthGetMethod("mscorlib", "System.IO.File", "WriteAllBytes", new Type[] { typeof(string), typeof(byte[]) });
                methodInfo.Invoke(null, new object[] { path, data });
            }

            internal static void Delete(string path)
            {
                var methodInfo = StealthGetMethod("mscorlib", "System.IO.File", "Delete", new Type[] { typeof(string) });
                methodInfo.Invoke(null, new object[] { path });
            }
        }
    }
}
